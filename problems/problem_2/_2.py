# #########################################PROBLEM######################################################################
# # Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# # By starting with 1 and 2, the first 10 terms will be:
# # 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# # By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# # find the sum of the even-valued terms.
#
# #########################################SOLUTION######################################################################
# def fibonacci_generator():
#     left, right = 0, 1
#     while True:
#         left, right = right, left + right
#         yield left

# def sum_even_fibonacci_below(limit):
#     total_sum = 0
#     for num in fibonacci_generator():
#         if num > limit:
#             break
#         if num % 2 == 0:
#             total_sum += num
#     return total_sum

# def main():
#     print(sum_even_fibonacci_below(4_000_000))

# if __name__ == "__main__":
#     main()

class FibonacciEvenSum:
    def __init__(self, limit):
        self.limit = limit

    def fibonacci_generator(self):
        left, right = 0, 1
        while True:
            left, right = right, left + right
            yield left

    def sum_even_fibonacci(self):
        total_sum = 0
        for num in self.fibonacci_generator():
            if num > self.limit:
                break
            if num % 2 == 0:
                total_sum += num
        return total_sum

def main():
    solver = FibonacciEvenSum(4_000_000)
    print(solver.sum_even_fibonacci())

if __name__ == "__main__":
    main()